[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2017 FIUBA
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jonathan Marino (FIUBA) - initial API and implementation
[/comment]
[module ImplementationFile('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import org::eclipse::umlgen::gen::embedded::c::commons::class/]

[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::method/]
[import org::eclipse::umlgen::gen::embedded::c::commons::parameter/]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function/]
[import org::eclipse::umlgen::gen::embedded::c::templates::methods/]
[import org::eclipse::umlgen::gen::embedded::c::templates::define/]
[import org::eclipse::umlgen::gen::embedded::c::templates::include/]
[import org::eclipse::umlgen::gen::embedded::c::templates::variable/]
[import org::eclipse::umlgen::gen::embedded::c::templates::constant/]
[import org::eclipse::umlgen::gen::embedded::c::templates::type/]
[import org::eclipse::umlgen::gen::embedded::c::services::queries/]
[import org::eclipse::umlgen::gen::embedded::c::services::configuration/]

[query public getAllAncestorsWithVirtualMethods (aClass : Class) : Set(Class) = aClass.getAncestors()->select( c1: Class | c1.hasVirtualMethods() )/]


[comment archivo de informacion privada /]
[template public DOOPC_generateImplementationFile(aClass : uml::Class)]


/**********************************************************************************
 * Copyright: [getCopyright()/]
 * Project: [aClass.getModel().name/]
 * File: [getFilePath()/][getName()/].c
 * Code Management Tool File Version: [getVersion()/]
[if (isSvnDateEnabled())]
 * Date: $Date$
[/if]
 * SDD Component: [name/]
 * Language: C
 * Author: [getAuthor()/]
[if (isSvnIdEnabled())]
 * Last Change: $Id$
[/if]
 **********************************************************************************/

/*!
 * \file [getFilePath()/][getName()/].c
 * \brief [name/]
 */
[aClass.getAllAncestorsWithVirtualMethods()/]
[comment ---------- generate includes ----------------------------------/]
[genCIncludes()/]


/**********************************************************************************
 * [getFilePath()/][getName()/].c
 **********************************************************************************/
/*## package [getFullFilePath().concat('/').substituteAll('//', '').substituteAll('/', '::')/] */

/*## class TopLevel::[name/] */
[aClass.getAllAncestorsWithVirtualMethods()/]
[comment ---------- generate macros & constants ------------------------/]
[genCDefines()/]

[comment ---------- generate type definitions --------------------------/]
[genCTypes()/]

[comment ---------- generate constants ---------------------------------/]
[if (aClass.hasCConstants())]
[genCConstants()/]
[/if]

[generateMethodsImplementation()/]

/* Constructors and destructors:*/
void [aClass.name/]_Init([aClass.name/]* const self,	
	[let seqOp : Sequence(uml::Operation) =  getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getAllOperations ( aClass ) ) ) ) ) ) ]
	[for (o : Operation | seqOp)  separator(',')]
	[o.generateReturnType()/] (*[o.name/])([o.generateSOOPCMethodArguments()/]) 
	[/for]
	[/let]){

[if aClass.hasSuperclass() ]
/* initialize base class */
self->super = [aClass.name/]_Create(); 
[/if]
[let seqOp : Sequence(uml::Operation) =  getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getAllOperations ( aClass ) ) ) ) ) ) ]
[for (o : Operation | seqOp) ]
	self->[o.name/] =  [o.class.name/]_[o.name/];
[/for]
[/let]

//[protected('user code for '+ aClass.name +'_Init')]
//TO DO Initialize attributes and other initialization stuffs
//[/protected]

}

void [aClass.name/]_Cleanup([aClass.name/]* const self){
[if aClass.hasSuperclass() ]
[aClass.firstAncestorName()/]_Cleanup( self );
[/if]
//[protected('user code for '+ aClass.name +'_Cleanup')]
//TO DO another cleanup stuffs
//[/protected]
}

[aClass.name/] * [aClass.name/]_Create(void){
	[aClass.name/]* self = ([aClass.name/] *) malloc(sizeof([aClass.name/]));
	if(me!=NULL)
	{
		[aClass.name/]_Init(self, 
			[let seqOp : Sequence(uml::Operation) =  getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getAllOperations ( aClass ) ) ) ) ) ) ]
			[for (o : Operation | seqOp)  separator(',')]
			[aClass.name/]_[o.name/] 
			[/for]
			[/let]);
	}
	return me;
}

void [aClass.name/]_Destroy([aClass.name/]* const self){
 	if(self!=NULL)
	{
		[aClass.name/]_Cleanup(self);
	}

	free(self);
}

/**********************************************************************************
 * File Path: [getFullFilePath()/][getName()/].c
 **********************************************************************************/
[/template]

[template public generateMethodsImplementation (aClass : Class) ]
// Final Methods 
[let seqOp : Sequence(uml::Operation) = getNotInline(getNotAbstract(getNotStatic(getOwnedOperations(aClass))))]
[for (o : Operation | seqOp) ]      
[generateSOOPCMethodPrototype(o)/]{

	//[protected('user code for '+o.name)]
	//TO DO
	//[/protected]
}
[/for]
[/let]
[/template]


