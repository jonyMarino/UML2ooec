[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2017 FIUBA
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jonathan Marino (FIUBA) - initial API and implementation
[/comment]
[module OocImplementationFile('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import org::eclipse::umlgen::gen::embedded::c::commons::OOC::OocClass/]

[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::method/]
[import org::eclipse::umlgen::gen::embedded::c::commons::parameter/]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function/]
[import org::eclipse::umlgen::gen::embedded::c::templates::methods/]
[import org::eclipse::umlgen::gen::embedded::c::templates::define/]
[import org::eclipse::umlgen::gen::embedded::c::templates::include/]
[import org::eclipse::umlgen::gen::embedded::c::templates::variable/]
[import org::eclipse::umlgen::gen::embedded::c::templates::constant/]
[import org::eclipse::umlgen::gen::embedded::c::templates::type/]
[import org::eclipse::umlgen::gen::embedded::c::services::queries/]
[import org::eclipse::umlgen::gen::embedded::c::services::configuration/]



[comment archivo de informacion privada /]
[template public generateOOCImplementationFile(aClass : uml::Class)]
/**********************************************************************************
 * Copyright: [getCopyright()/]
 * Project: [aClass.getModel().name/]
 * File: [getFilePath()/][getName()/].c
 * Code Management Tool File Version: [getVersion()/]
[if (isSvnDateEnabled())]
 * Date: $Date$
[/if]
 * SDD Component: [name/]
 * Language: C
 * Author: [getAuthor()/]
[if (isSvnIdEnabled())]
 * Last Change: $Id$
[/if]
 **********************************************************************************/

/*!
 * \file [getFilePath()/][getName()/].c
 * \brief [name/]
 */

[comment ---------- generate includes ----------------------------------/]
[genCIncludes()/]


/**********************************************************************************
 * [getFilePath()/][getName()/].c
 **********************************************************************************/
/*## package [getFullFilePath().concat('/').substituteAll('//', '').substituteAll('/', '::')/] */

/*## class TopLevel::[name/] */

[comment ---------- generate macros & constants ------------------------/]
[genCDefines()/]

[comment ---------- generate type definitions --------------------------/]
[genCTypes()/]

[comment ---------- generate constants ---------------------------------/]
[if (aClass.hasCConstants())]
[genCConstants()/]
[/if]


/* This is a MyChild class implementation file
 */

#include "[aClass.getName().toLowerCase()/].h"
#include "implement/[aClass.getName().toLowerCase()/].h"

#include <ooc/exception.h>

/** \class [aClass.getName()/]
 *  \brief MyChild class - brief description. [comment]todo[/comment]
 * 	\see [aClass.getName().toLowerCase()/].h
 */

/** \file [aClass.getName().toLowerCase()/].h 
 *  \brief [aClass.getName()/] class - brief description.[comment]todo[/comment]
 * MyChild is a .....
 */ 

/* Allocating the class description table and the vtable
 */

AllocateClass( [aClass.getName()/], [aClass.getSuperClassName()/] );

/* Class virtual function prototypes
 */


[let seqOp : Sequence(uml::Operation) = getVirtual(getNotInline(getNotAbstract(getNotStatic(getNotPrivate(getOwnedOperations(aClass))))))]
[for (o : Operation | seqOp) ]      
static
[generateReturnType(o)/]
[o.class.name/]_[o.name/] ([o.generateOOCMethodArguments()/]){
	//[protected('for '+o.class.name+'_'+o.name)]
	//TO DO
	//[/protected]
}
[/for]
[/let]


/* Class initializing
 */

static
void
[aClass.getName()/]_initialize( Class this )
{
	[aClass.getName()/]Vtable vtab = & [aClass.getName()/]VtableInstance;
	
	[let seqOp : Sequence(uml::Operation) = getVirtual(getNotInline(getNotAbstract(getNotStatic(getNotPrivate(getOwnedOperations(aClass))))))]
	[for (o : Operation | seqOp) ]      
	vtab->[o.name/]	= 	[o.class.name/]_[o.name/];
	[/for]
	[/let]
	

	[comment]todo: preguntar si hay forma de obtenerlo y que pasa si se llama varias veces a ooc_init_class
	ooc_init_class( !!! Classes that are USED by MyChild !!! ); Remove if you initialize it other place![/comment]
	
	/* Allocate global resources here */
	//[protected('for '+aClass.getName()+'_initialize')]
	//TO DO
	//ooc_init_class( !!! Classes that are USED by [aClass.getName()/] !!! ); Remove if you initialize it other place!
	//[/protected]
	
}

/* Class finalizing
 */

#ifndef OOC_NO_FINALIZE
static
void
[aClass.getName()/]_finalize( Class this )
{
	//[protected('for '+aClass.getName()+'_finalize')]
	/* Release global resources! */
	//[/protected]
}
#endif


/* Constructor
 */

static
void
[aClass.getName()/]_constructor( [aClass.getName()/] self, const void * params )
{
	assert( ooc_isInitialized( [aClass.getName()/] ) );
	
	
	chain_constructor( [aClass.getName()/], self,
	/*[protected('for '+aClass.getName()+'_constructor')]
*/
	NULL ); //!!! TODO !!! change the third parameter as required! 
	/*[/protected]*/
}

/* Destructor
 */

static
void
[aClass.getName()/]_destructor( [aClass.getName()/] self, [aClass.getName()/]Vtable vtab )
{
	//[protected('for '+aClass.getName()+'_destructor')]
	//TODO
	//[/protected]

}

/* Copy constuctor
 */

static
int
[aClass.getName()/]_copy( [aClass.getName()/] self, const [aClass.getName()/] from )
{
	//[protected('for '+aClass.getName()+'_copy')]
	/* makes the default object copying (bit-by-bit) */
	return OOC_COPY_DEFAULT;
	
	/*Other alternatives:*/

	/* Copies data by hand */
	//self->data = from->data;
	//...
	//return OOC_COPY_DONE;
	
	/* Prevent object duplication */
	//return OOC_NO_COPY;
	//[/protected]
}

/*	=====================================================
	Class member functions
 */


[aClass.getName()/]
[aClass.getName().toLower()/]_new( void )
{
	//[protected('for '+aClass.getName().toLower()+'_new')]
	ooc_init_class( [aClass.getName()/] );// !!! TODO !!! You may want to remove the initialization from here ...
	//[/protected]	
	return ([aClass.getName()/]) ooc_new( [aClass.getName()/], NULL );
}


[let seqOp : Sequence(uml::Operation) = getNotVirtual(getNotInline(getNotAbstract(getNotStatic(getOwnedOperations(aClass)))))]
[for (o : Operation | seqOp) ]      
[generateReturnType(o)/]
[aClass.getName().toLower()/]_[o.name/] ([o.generateOOCMethodArguments()/]){
	//[protected('for '+o.name)]
	//TO DO
	//[/protected]
}
[/for]
[/let]
/**********************************************************************************
 * File Path: [getFullFilePath()/][getName()/].c
 **********************************************************************************/
[/template]

