
[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2017 FIUBA
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jonathan Marino (FIUBA) - initial API and implementation
[/comment]
[module ImplementationFile('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import org::eclipse::umlgen::gen::embedded::c::commons::class/]

[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::method/]
[import org::eclipse::umlgen::gen::embedded::c::commons::parameter/]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function/]
[import org::eclipse::umlgen::gen::embedded::c::templates::methods/]
[import org::eclipse::umlgen::gen::embedded::c::templates::define/]
[import org::eclipse::umlgen::gen::embedded::c::templates::include/]
[import org::eclipse::umlgen::gen::embedded::c::templates::variable/]
[import org::eclipse::umlgen::gen::embedded::c::templates::constant/]
[import org::eclipse::umlgen::gen::embedded::c::templates::type/]
[import org::eclipse::umlgen::gen::embedded::c::services::queries/]
[import org::eclipse::umlgen::gen::embedded::c::services::configuration/]

[query public getAllAncestorsWithVirtualMethods (aClass : Class) : Set(Class) = aClass.getAncestors()->select( c1: Class | c1.hasVirtualMethods() )/]


[comment archivo de informacion privada /]
[template public EOOC_generateImplementationFile(aClass : uml::Class)]


/**********************************************************************************
 * Copyright: [getCopyright()/]
 * Project: [aClass.getModel().name/]
 * File: [getFilePath()/][getName()/].c
 * Code Management Tool File Version: [getVersion()/]
[if (isSvnDateEnabled())]
 * Date: $Date$
[/if]
 * SDD Component: [name/]
 * Language: C
 * Author: [getAuthor()/]
[if (isSvnIdEnabled())]
 * Last Change: $Id$
[/if]
 **********************************************************************************/

/*!
 * \file [getFilePath()/][getName()/].c
 * \brief [name/]
 */

[comment ---------- generate includes ----------------------------------/]
[genCIncludes()/]


/**********************************************************************************
 * [getFilePath()/][getName()/].c
 **********************************************************************************/
/*## package [getFullFilePath().concat('/').substituteAll('//', '').substituteAll('/', '::')/] */

/*## class TopLevel::[name/] */

[comment ---------- generate macros & constants ------------------------/]
[genCDefines()/]

[comment ---------- generate type definitions --------------------------/]
[genCTypes()/]

[comment ---------- generate constants ---------------------------------/]
[if (aClass.hasCConstants())]
[genCConstants()/]
[/if]

#define SELF        ((struct [aClass.name/]_attribute*)self)
#define AS_SELF(a)  ((struct [aClass.name/]_attribute*)(a) )
[if ( aClass.hasSuperclass( ) ) ]
#define SUPER       (([aClass.getSuperClasses().name/] *)self)
[else]
#define SUPER       (( object          *)self)
[/if]



const struct [aClass.name/]_interface [aClass.name/]_interface;

void* [aClass.name/]_interfaces([aClass.name/] * self, void *ref_i)
{
[for (namedElement : NamedElement | aClass.getAllInterfaces()) separator(', ')]
	if (ref_i == &[namedElement.name/]_interface)
		return &(*self)->[namedElement.oclAsType(Interface).ownedOperation->first().name/];
[/for]
[if ( aClass.hasSuperclass( ) ) ]
		return [aClass.getSuperClasses().name/]_interfaces(self,ref_i);
[else]
	return object_interfaces(SUPER,ref_i);
[/if]
}


[generateFinalMethodsImplementation()/]

[generateDynamicMethodsImplementation()/]





const struct [aClass.name/]_interface [aClass.name/]_interface={
	[aClass.name/]_interfaces
	[for (c : Class | entireClassesHierarchechy(aClass)->reverse()) ]   
   	[let seqOp2 : Sequence(uml::Operation) = getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getOwnedOperations ( c ) ) ) ) ) ) ]
	[let seqOp3 : Sequence(uml::Operation) = seqOp2->select(op : uml::Operation | aClass.getAllInterfaces()->collect(ownedOperation)->forAll( o:Operation | not redefine(op,o)  ) ) ]
	[for (o : Operation |  seqOp3 ) before(',')separator (',')]      
	[aClass.getLastClassDefinerName(o)/]_[o.name/]
	[/for]	
	[/let]
	[/let]
	[/for]
	[for (interface: NamedElement | aClass.getAllInterfaces())]
	[for (o : Operation |  interface.oclAsType(Interface).ownedOperation ) before(',')separator (',')]      
	[aClass.name/]_[o.name/]
	[/for]
	[/for]
};

/**********************************************************************************
 * File Path: [getFullFilePath()/][getName()/].c
 **********************************************************************************/
[/template]

[template public generateSelectorsImplementation (aClass : Class) ]
// Selectors    
[let seqOp : Sequence(uml::Operation) = getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getOwnedOperations ( aClass ) ) ) ) ) ) ][for (o : Operation | seqOp) ]      
[generateSOOPCMethodPrototype(o)/]{
	[if hasReturnType(o)]return [/if] self[ for (c:Class | aClass.getAllAncestorsWithVirtualMethods())] -> super[/for]-> vptr -> [o.name/](_self[for (p:Parameter | getOperationParameters(o)) before(',') separator(',')] [p.getName()/] [/for]);
}
[/for]
[/let]
[/template]


[template public generateFinalMethodsImplementation (aClass : Class) ]
// Final Methods 
[let seqOp : Sequence(uml::Operation) = getNotVirtual(getNotInline(getNotAbstract(getNotStatic(getOwnedOperations(aClass)))))]
[for (o : Operation | seqOp) ]      
[generateSOOPCMethodPrototype(o)/]{

	//[protected('for '+o.name)]
	//TO DO
	//[/protected]
}
[/for]
[/let]
[/template]

[template public generateDynamicMethodsImplementation (aClass : Class) ]
// Virtual Methods 
[let seqOp : Sequence(uml::Operation) = getVirtual(getNotInline(getNotAbstract(getNotStatic(getNotPrivate(getOwnedOperations(aClass))))))]
[for (o : Operation | seqOp) ]      
[generateReturnType(o)/] [o.class.name/]_[o.name/] ([o.class.name/] * self[for(p:Parameter | getOperationParameters(o)) before(', ') separator(', ')][p.genParameter()/][/for]){
	[if (o.isAbstract)]
	ASSERT(0); /* purely-virtual function should never be called */
	[if not getOperationParameters(o)->exists ( p : uml::Parameter | p.isReturnParam( )  ) ]
	return 0U; /* to avoid compiler warnings */
	[/if]
	[else]
	//[protected('for '+o.name)]
	//TO DO
	//[/protected]
	[/if]
}
[/for]
[/let]
[/template]
