[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2017 FIUBA
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jonathan Marino (FIUBA) - initial API and implementation
[/comment]
[module ImplementationFile('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import org::eclipse::umlgen::gen::embedded::c::commons::class/]
 
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::method/]
[import org::eclipse::umlgen::gen::embedded::c::commons::parameter/]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function/]
[import org::eclipse::umlgen::gen::embedded::c::templates::methods/]
[import org::eclipse::umlgen::gen::embedded::c::templates::define/]
[import org::eclipse::umlgen::gen::embedded::c::ooc::soopc::templates::include/]
[import org::eclipse::umlgen::gen::embedded::c::templates::variable/]
[import org::eclipse::umlgen::gen::embedded::c::templates::constant/]
[import org::eclipse::umlgen::gen::embedded::c::templates::type/]
[import org::eclipse::umlgen::gen::embedded::c::services::queries/]
[import org::eclipse::umlgen::gen::embedded::c::services::configuration/]
[import org::eclipse::umlgen::gen::embedded::c::ooc::soopc::templates::method/]

[comment archivo de informacion privada /]
[template public generate_SOOPCImplementationFile(aClass : uml::Class)]
/**********************************************************************************
 * Copyright: [getCopyright()/]
 * Project: [aClass.getModel().name/]
 * File: [getFilePath()/][getName()/].c
 * Code Management Tool File Version: [getVersion()/]
[if (isSvnDateEnabled())]
 * Date: $Date$
[/if]
 * SDD Component: [name/]
 * Language: C
 * Author: [getAuthor()/]
[if (isSvnIdEnabled())]
 * Last Change: $Id$
[/if]
 **********************************************************************************/

/*!
 * \file [getFilePath()/][getName()/].c
 * \brief [name/]
 */
[comment ---------- generate includes ----------------------------------/]
[genCIncludes()/]



/**********************************************************************************
 * [getFilePath()/][getName()/].c
 **********************************************************************************/
/*## package [getFullFilePath().concat('/').substituteAll('//', '').substituteAll('/', '::')/] */

/*## class TopLevel::[name/] */
[comment ---------- generate macros & constants ------------------------/]
[genCDefines()/]

[comment ---------- generate type definitions --------------------------/]
[genCTypes()/]

[comment ---------- generate constants ---------------------------------/]
[if (aClass.hasCConstants())]
[genCConstants()/]
[/if]


[generateDynamicMethodsImplementation()/]

[generateFinalMethodsImplementation()/]

[generateSelectorsImplementation()/]

/**********************************************************************************
 * File Path: [getFullFilePath()/][getName()/].c
 **********************************************************************************/
[/template]

[template public generateSelectorsImplementation (aClass : Class) ]
// Selectors    
[let seqOp : Sequence(uml::Operation) = getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getOwnedOperations ( aClass ) ) ) ) ) ) ][for (o : Operation | seqOp) ]      
[generateSOOPCMethodPrototype(o)/]{
	[if hasReturnType(o)]return [/if] (**([aClass.getName()/]Vtbl**)self).[o.name/](self[for (p:Parameter | getOperationParameters(o)) before(',') separator(',')] [p.getName()/] [/for]);
}
[/for]
[/let]
[/template]


[template public generateFinalMethodsImplementation (aClass : Class) ]
// Final Methods 
[let seqOp : Sequence(uml::Operation) = getNotVirtual(getNotInline(getNotAbstract(getNotStatic(getOwnedOperations(aClass)))))]
[for (o : Operation | seqOp) ]      
[generateSOOPCMethodPrototype(o)/]{
	[if o.name = 'ctor']
	static [aClass.name/]Vtbl const vtbl={
	[for (c : OclAny | aClass.getAncestors()) ]{[/for] [comment]There are as many anidated structures as ancestors[/comment]
	[for (c : Class | entireClassesHierarchechy(aClass)->reverse()) ]
   	[let seqOp2 : Sequence(uml::Operation) = getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getOwnedOperations ( c ) ) ) ) ) ) ]
	[for (o : Operation |  seqOp2 ) separator (',')]      
		[aClass.getLastClassDefinerName(o)/]_[o.name/]_[/for]	
	[/let]
	[if (c <> aClass)]		},[/if]
	[/for]
	};
	[/if]

	[if ( o.name = 'ctor' )]
	//[protected('user code for calling super constructor')]
	[if ( (aClass.hasSuperclass()) and (aClass.getSingleInheritanceSuperClass().ownedOperation->exists(op:Operation | op.name = 'ctor')))]
	[o.class.superClass.name/]_ctor (([o.class.superClass.name/]*)self[for(p:Parameter | getOperationParameters(o)) before(', ') separator(', ')][p.name/][/for]);
	[/if]
	//[/protected]
	[if aClass.hasVirtualMethods() ]
 	(([aClass.getFirstRelatedClassWithVirtualMethods().getName()/]*)self) -> vptr = ([aClass.getFirstRelatedClassWithVirtualMethods().getName()/]Vtbl*)&vtbl; /* override the vptr */		
	[/if]
	[/if]
	//[protected('user code for '+o.name)]
	//TO DO
	//[/protected]
	
}
[/for]
[/let]
[/template]

[template public generateDynamicMethodsImplementation (aClass : Class) ]
// Virtual Methods 
[let seqOp : Sequence(uml::Operation) = getVirtual(getNotInline(getNotStatic(getNotPrivate(getOwnedOperations(aClass)))))]
[for (o : Operation | seqOp) ]      
[o.genVirtualMethodPrototype()/]{
	[if (o.isAbstract)]
	assert(0); /* purely-virtual function should never be called */
	[if getOperationParameters(o)->exists ( p : uml::Parameter | p.isReturnParam( )  ) ]
	return 0U; /* to avoid compiler warnings */
	[/if]
	[else]
	//[protected('user code for '+o.class.getName()+'_'+o.getName())]
	//TO DO
	//[/protected]
	[/if]
}
[/for]
[/let]
[/template]
