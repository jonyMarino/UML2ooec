[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2018
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jonathan Marino - initial API and implementation
[/comment]
[module classDeclarationFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::umlgen::gen::embedded::c::templates::ooc::comment/]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations /]
[import org::eclipse::umlgen::gen::embedded::c::commons::ooc::tmooc::method /]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::ooc::tmooc::class/]
[import org::eclipse::umlgen::gen::embedded::c::commons::class/]
[import org::eclipse::umlgen::gen::embedded::c::commons::constraint/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function/]
[import org::eclipse::umlgen::gen::embedded::c::templates::ooc::tmooc::method /]
[import org::eclipse::umlgen::gen::embedded::c::templates::define/]
[import org::eclipse::umlgen::gen::embedded::c::templates::type/]
[import org::eclipse::umlgen::gen::embedded::c::templates::include/]
[import org::eclipse::umlgen::gen::embedded::c::templates::constant/]
[import org::eclipse::umlgen::gen::embedded::c::templates::variable/]
[import org::eclipse::umlgen::gen::embedded::c::services::queries/]
[import org::eclipse::umlgen::gen::embedded::c::services::configuration/]
[import org::eclipse::umlgen::gen::embedded::c::commons::property /]


[template public OOC_generateDeclarationFile(aClass : uml::Class)]
[aClass.genFileComment(getFilePath().toString(),'h','C')/]

#ifndef [getName().toUpperCase()/]_H
#define [getName().toUpperCase()/]_H

[comment ---------- generate includes ----------------------------------/]
[genHIncludes()/]
[if ( aClass.hasSuperclass( ) ) ]
#include "[aClass.getSuperClasses().getFullFilePath()/][aClass.getSuperClassName()/].h"
[else]
#include <ooc/ooc.h>
[/if]
[for (namedElement : NamedElement | aClass.getAllInterfaces())]
#include "[namedElement.getFullFilePath()/][namedElement.name/].h"
[/for]

/**********************************************************************************
 * [getFilePath()/][getName()/].h
 **********************************************************************************/

/*## package [getFullFilePath().concat('/').substituteAll('//', '').substituteAll('/', '::')/] */

/*! 
 * \package [name/]
[if ownedComment->notEmpty()]
 * [ownedComment.format('\x5cbrief ', false, ' * ', 120)/]
[/if]
[if (isTraceabilityEnabled())]
[if (aClass.isConstrained(getModel().getAllConstraints()))]
 *
 * <b>Requirements traceability</b>
 [aClass.getRequirementList('*   ')/]
[/if]
[/if]
 */

DeclareClass( [aClass.name/], [aClass.getSuperClassName()/] );


[comment ---------- generate prototypes of prublic operations ----------/]


[genNewMethodPrototype()/];

[let seqOp : Sequence(uml::Operation) = getOwnedOperations()->getNotAbstract()->getNotInline()->getNotVirtual()->getNotConstructor()]
[for (o : Operation | seqOp) ]      
[generateReturnType(o)/] [aClass.getName().toLower()/]_[o.name/] ([o.generateOOCMethodArguments()/]);
[/for]
[/let]


/* Virtual function definitions
 */


Virtuals( [aClass.name/], [aClass.getSuperClassName()/] );


[let seqOp : Sequence(uml::Operation) = aClass.getOwnedOperations()->getVirtual()->getNotInline()->getNotRedefine()->getNotInterfaceRedefiner()  ]
[for (o : Operation | seqOp)  ]
	[o.generateReturnType()/] (*[o.name/])([o.generateOOCMethodArguments()/]);
[/for]
[/let]

[for (namedElement : NamedElement | aClass.getAllInterfaces())]
	Interface( [namedElement.name/] );
[/for]

EndOfVirtuals;


[comment ---------- generate macros & constants ------------------------/]
[genHDefines()/]

[comment ---------- generate type definitions --------------------------/]
[genHTypes()/]

[comment ---------- generate public inline functions -------------------/]
[if (aClass.hasHInlineOperations())]
[genHInlineOperations()/]
[/if]

#endif

/**********************************************************************************
 * File Path: [getFullFilePath()/][getName().toLowerCase()/].h
 **********************************************************************************/




[/template]


