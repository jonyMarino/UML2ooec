[comment encoding = UTF-8 /]
[module method('http://www.eclipse.org/uml2/5.0.0/UML') extends org::eclipse::umlgen::gen::embedded::c::templates::function]

[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement /]
[import org::eclipse::umlgen::gen::embedded::c::commons::class /]
[import org::eclipse::umlgen::gen::embedded::c::commons::ooc::dynace::method /]
[import org::eclipse::umlgen::gen::embedded::c::commons::parameter/]
[import org::eclipse::umlgen::gen::embedded::c::commons::typedelements/]
[import org::eclipse::umlgen::gen::embedded::c::commons::ooc::operations/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function /]

[template protected genOperationParametersDef(op : uml::Operation) overrides genOperationParametersDef ? ((hasOperationParameters())) post(trim())]
[/template]

[template private genVisibility(anOperation : uml::Operation) post(trim()) ]
[if( visibility = VisibilityKind::private)]
private
[else]
public
[/if]
[/template]

[template private genMethod (anOperation : uml::Operation) ]
[genOperationHeader()/]
/*## method [name/] */
[genVisibility()/] [genMethodsType()/] [genReturnType()/] [getName()/]([genOperationParametersDef()/]){
    /* [protected('for ' + name + ' */')]
    /* [/protected] for [name/] */
}
[/template]

[template private genReturnType(anOperation : uml::Operation) ]
[if not getReturn(ownedParameter->asSequence())->isEmpty()][for (p : Parameter | getReturn(ownedParameter->asSequence()))][getType()/][genPointer()/][/for][/if]
[/template]

[template private genMethodsType (anOperation : uml::Operation) post(trim())]
	[if(anOperation.isStatic)]
		[if(anOperation.isVariadic())]
			cvmeth
		[else]
			cmeth
		[/if]
	[else]
		[if(anOperation.isVariadic())]
			ivmeth
		[else]
			imeth
		[/if]
	[/if]
[/template]

[template public genClassMethods(cl : uml::Class) post(trim())]
[let seqOp : Sequence(uml::Operation) = getOwnedOperations(cl)->getStatic()->getNotAbstract()->getNotInitMethods()]
[if (not seqOp->isEmpty())]
/************************************ CLASS METHODS ****************************************/

[/if]
[for (o : uml::Operation | seqOp->sortedBy(name)->sortedBy(visibility))]
[o.genMethod()/]

[/for]
[/let]
[/template]

[template public genInstanceMethods(cl : uml::Class) post(trim())]
[let seqOp : Sequence(uml::Operation) = getOwnedOperations(cl)->getNotStatic()->getNotAbstract()->getNotInitMethods()]
[if (not seqOp->isEmpty())]
/************************************ INSTANCE METHODS *************************************/

[/if]
[for (o : uml::Operation | seqOp->sortedBy(name)->sortedBy(visibility))]
[o.genMethod()/]

[/for]
[/let]
[/template]

[query public getInitFunction(aClass : uml::Class) : uml::Operation = aClass.getOwnedOperations()->getInitMethods()->first()/]

[template public genInitFunction(aClass : uml::Class) post(trim())]
[let initFunction : uml::Operation = getInitFunction()]
/************************************ INIT FUNCTION **************************************/

void [initFunction.getName()/](void){
    /* [protected('for ' + name + ' */')]
    /* [/protected] for [name/] */
}
[/let]
[/template]

