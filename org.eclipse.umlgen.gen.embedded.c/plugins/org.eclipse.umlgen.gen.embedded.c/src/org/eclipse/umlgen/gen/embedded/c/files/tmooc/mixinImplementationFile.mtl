[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2018
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jonathan Marino - initial API and implementation
[/comment]
[module mixinImplementationFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::umlgen::gen::embedded::c::templates::ooc::comment/]
[import org::eclipse::umlgen::gen::embedded::c::templates::ooc::tmooc::interface /]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations /]
[import org::eclipse::umlgen::gen::embedded::c::commons::ooc::interface /]
[import org::eclipse::umlgen::gen::embedded::c::templates::ooc::tmooc::method /]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::class/]
[import org::eclipse::umlgen::gen::embedded::c::commons::constraint/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function/]
[import org::eclipse::umlgen::gen::embedded::c::templates::define/]
[import org::eclipse::umlgen::gen::embedded::c::templates::type/]
[import org::eclipse::umlgen::gen::embedded::c::templates::include/]
[import org::eclipse::umlgen::gen::embedded::c::templates::constant/]
[import org::eclipse::umlgen::gen::embedded::c::templates::variable/]
[import org::eclipse::umlgen::gen::embedded::c::commons::property /]

[template public generateOOCInterfaceImplementationFile(anInterface : uml::Interface)?(anInterface.isMixin())]
[anInterface.genFileComment(getFilePath().toString(),'c','C')/]

[comment ---------- generate includes ----------------------------------/]
[genCIncludes()/]

/**********************************************************************************
 * [getFilePath()/][getName()/].c
 **********************************************************************************/
/*## package [getFullFilePath().concat('/').substituteAll('//', '').substituteAll('/', '::')/] */

/*## class TopLevel::[name/] */



#include "[anInterface.getFullFilePath()/]implement/[anInterface.getName()/].h"

AllocateMixin( [anInterface.getName()/] );

/* Initialization, finalization
 */

static
void
[anInterface.getName()/]_initialize(void)
{
	//[protected('for '+anInterface.getName()+'_initialize')]
	//TO DO
	//[/protected]
}

static
void
[anInterface.getName()/]_finalize(void)
{
	//[protected('for '+anInterface.getName()+'_finalize')]
	//TO DO
	//[/protected]
}


/* Construction, destruction
 */

static
void
[anInterface.getName()/]_constructor( [anInterface.getName()/] [anInterface.getName().toLower()/], [anInterface.getName()/]Data self )
{

	//[protected('for '+anInterface.getName()+'_constructor')]
	//TO DO
	// Build up your [anInterface.getName()/]DataFields.
	// This method is called ones for every Object, and every field is zeroed at entry.
	//self->data = ?
	//[/protected]
	
}

static
int
[anInterface.getName()/]_copy( [anInterface.getName()/] [anInterface.getName().toLower()/], [anInterface.getName()/]Data self, const [anInterface.getName()/]Data from )
{
	//[protected('for '+anInterface.getName()+'_copy')]
	return OOC_COPY_DEFAULT;
	//return OOC_COPY_DONE;
	//return OOC_NO_COPY;
	//[/protected]
}

static
void
[anInterface.getName()/]_destructor( [anInterface.getName()/] [anInterface.getName().toLower()/], [anInterface.getName()/]Data self )
{
	//[protected('for '+anInterface.getName()+'_destructor')]
	//TODO
	//[/protected]
}


/* Method implementations
 */

[let seqOp : Sequence(uml::Operation) = anInterface.getOwnedOperations()->getNotPrivate()->getNotStatic()->getNotAbstract()]
[for (o : Operation | seqOp) ]      
static
[generateReturnType(o)/]
[anInterface.getName()/]_[o.name/] (Object carrier[o.generateMethodParametersDef()/]){
	//[protected('for '+o.class.name+'_'+o.name)]
	//TODO
	//[anInterface.getName()/]Data self = ooc_get_mixin_data( carrier, [anInterface.getName()/] );
	//[/protected]
}
[/for]
[/let]


/* Populating the interface's virtual table
 */

void
[anInterface.getName()/]_populate( [anInterface.getName()/] [anInterface.getName().toLower()/] )
{
	[let seqOp : Sequence(uml::Operation) = anInterface.getOwnedOperations()->getNotPrivate()->getNotStatic()->getNotAbstract()]
	[for (anOperation : uml::Operation | seqOp) ]      
	[anInterface.getName().toLower()/]->[anOperation.getName()/]	=	[anInterface.getName()/]_[anOperation.name/];
	[/for]
	[/let]	
}


/**********************************************************************************
 * File Path: [getFullFilePath()/][getName()/].c
 **********************************************************************************/
[/template]
