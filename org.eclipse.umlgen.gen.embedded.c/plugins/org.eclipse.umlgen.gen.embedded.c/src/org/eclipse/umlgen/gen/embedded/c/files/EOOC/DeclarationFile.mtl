[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2015 Spacebel SA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Johan Hardy (Spacebel) - initial API and implementation
[/comment]
[module DeclarationFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::umlgen::gen::embedded::c::commons::operations /]
[import org::eclipse::umlgen::gen::embedded::c::templates::methods /]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::class/]
[import org::eclipse::umlgen::gen::embedded::c::commons::constraint/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function/]
[import org::eclipse::umlgen::gen::embedded::c::templates::define/]
[import org::eclipse::umlgen::gen::embedded::c::templates::type/]
[import org::eclipse::umlgen::gen::embedded::c::templates::include/]
[import org::eclipse::umlgen::gen::embedded::c::templates::constant/]
[import org::eclipse::umlgen::gen::embedded::c::templates::variable/]
[import org::eclipse::umlgen::gen::embedded::c::services::queries/]
[import org::eclipse::umlgen::gen::embedded::c::services::configuration/]
[import org::eclipse::umlgen::gen::embedded::c::commons::property /]
[import org::eclipse::umlgen::gen::embedded::c::commons::method /]
[import org::eclipse::umlgen::gen::embedded::c::templates::properties /]

[template public EOOC_generateDeclarationFile(aClass : uml::Class)]
/**********************************************************************************
 * Copyright: [getCopyright()/]
 * Project: [aClass.getModel().name/]
 * File: [getFilePath()/][getName()/].h
 * Code Management Tool File Version: [getVersion()/]
[if (isSvnDateEnabled())]
 * Date: $Date$
[/if]
 * SDD Component: [name/]
 * Language: C
 * Author: [getAuthor()/]
[if (isSvnIdEnabled())]
 * Last Change: $Id$
[/if]
 **********************************************************************************/

/*!
 * \file [getFilePath()/][getName()/].h
 * \brief [name/]
 */

#ifndef [getFullFilePath().substituteAll('/', '_')/][getName().substituteAll('/', '_')/]_H
#define [getFullFilePath().substituteAll('/', '_')/][getName().substituteAll('/', '_')/]_H

[comment ---------- generate includes ----------------------------------/]
[genHIncludes()/]
[if ( aClass.hasSuperclass( ) ) ]
#include "[aClass.getSuperClasses().name/].h"
[else]
#include "object.h"
[/if]
[for (namedElement : NamedElement | aClass.getAllInterfaces()) separator(', ')]
#include "[namedElement.name/].h"
[/for]

/**********************************************************************************
 * [getFilePath()/][getName()/].h
 **********************************************************************************/

/*## package [getFullFilePath().concat('/').substituteAll('//', '').substituteAll('/', '::')/] */

/*! 
 * \package [name/]
[if ownedComment->notEmpty()]
 * [ownedComment.format('\x5cbrief ', false, ' * ', 120)/]
[/if]
[if (isTraceabilityEnabled())]
[if (aClass.isConstrained(getModel().getAllConstraints()))]
 *
 * <b>Requirements traceability</b>
 [aClass.getRequirementList('*   ')/]
[/if]
[/if]
 */

#define [aClass.name.toUpper()/]_INTERFACE                         \
[if ( aClass.hasSuperclass( ) ) ]
	[aClass.getSuperClasses().name.toUpper()/]_INTERFACE	\
[else]
	OBJECT_INTERFACE	\
[/if]
[for (namedElement : NamedElement | aClass.getAllInterfaces()) separator(', ')]
	[namedElement.name.toUpper()/]_INTERFACE	\
[/for]
[let seqOp : Sequence(uml::Operation) = getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getOwnedOperations ( aClass ) ) ) ) ) ) ]
[let seqOp2 : Sequence(uml::Operation) = seqOp->select(op : uml::Operation | aClass.getAllInterfaces()->collect(ownedOperation)->forAll( o:Operation | not redefine(op,o)  ) ) ]
[for (o : Operation | seqOp2)  ]
	[o.generateReturnType()/] (*[o.name/])([o.generateSOOPCMethodArguments()/]); \
[/for]
[/let]
[/let]

//Class [aClass.name/] declaration
typedef  struct [aClass.name/]_interface * [aClass.name/];

struct [aClass.name/]_interface{
  [aClass.name.toUpper()/]_INTERFACE
};


struct [aClass.name/]_attribute {
[if ( aClass.hasSuperclass( ) ) ]
	struct [aClass.getSuperClasses().name/]_attribute super_atribute;
[else]
	struct object_attribute super_atribute;
[/if]
  	[let seq : Sequence(uml::NamedElement) = getNotReadOnly(getHasTypeApplied(getNotUsesStaticMethods(ownedAttribute->asSequence())))]
	[for (n : uml::NamedElement | seq->orderByContents())]
	[n.oclAsType(uml::Property).generateProperty()/]; 
	[/for]	
	[/let]
};

void* [aClass.name/]_interfaces([aClass.name/] * self, void *ref_i);	//do not use it
extern const struct [aClass.name/]_interface [aClass.name/]_interface; //do not use it, use [aClass.name/]_interface() instead
#define [aClass.name/]_interface() [aClass.name/]_interface

[comment ---------- generate macros & constants ------------------------/]
[genHDefines()/]

[comment ---------- generate type definitions --------------------------/]
[genHTypes()/]

[comment ---------- generate constants ---------------------------------/]
[if (aClass.hasHConstants())]
[genHConstants()/]

[/if]
[comment ---------- generate variable definitions ----------------------/]
[comment][if (aClass.hasHVariables())][/comment]
[comment][genHVariables()/][/comment]

[comment][/if][/comment]
[comment ---------- generate public inline functions -------------------/]
[if (aClass.hasHInlineOperations())]
[genHInlineOperations()/]
[/if]

[comment ---------- generate prototypes of prublic operations ----------/]
[for (o : Operation | aClass.ownedOperation->select(o:Operation | o.visibility <> VisibilityKind::private)) ]      
[generateSOOPCMethodPrototype(o)/];
[/for]

#endif

/**********************************************************************************
 * File Path: [getFullFilePath()/][getName()/].h
 **********************************************************************************/
[/template]
