[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2015 Spacebel SA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Jonathan Marino - initial API and implementation
[/comment]
[module DeclarationFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::eclipse::umlgen::gen::embedded::c::commons::operations /]
[import org::eclipse::umlgen::gen::embedded::c::templates::methods /]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::class/]
[import org::eclipse::umlgen::gen::embedded::c::commons::constraint/]
[import org::eclipse::umlgen::gen::embedded::c::templates::function/]
[import org::eclipse::umlgen::gen::embedded::c::templates::define/]
[import org::eclipse::umlgen::gen::embedded::c::templates::type/]
[import org::eclipse::umlgen::gen::embedded::c::templates::include/]
[import org::eclipse::umlgen::gen::embedded::c::templates::constant/]
[import org::eclipse::umlgen::gen::embedded::c::templates::variable/]
[import org::eclipse::umlgen::gen::embedded::c::services::queries/]
[import org::eclipse::umlgen::gen::embedded::c::services::configuration/]
[import org::eclipse::umlgen::gen::embedded::c::commons::property /]
[import org::eclipse::umlgen::gen::embedded::c::commons::method /]
[import org::eclipse::umlgen::gen::embedded::c::templates::properties /]

[template public SOOPC_generateDeclarationFile(aClass : uml::Class)]
/**********************************************************************************
 * Copyright: [getCopyright()/]
 * Project: [aClass.getModel().name/]
 * File: [getFilePath()/][getName()/].h
 * Code Management Tool File Version: [getVersion()/]
[if (isSvnDateEnabled())]
 * Date: $Date$
[/if]
 * SDD Component: [name/]
 * Language: C
 * Author: [getAuthor()/]
[if (isSvnIdEnabled())]
 * Last Change: $Id$
[/if]
 **********************************************************************************/

/*!
 * \file [getFilePath()/][getName()/].h
 * \brief [name/]
 */

#ifndef [getFullFilePath().substituteAll('/', '_')/][getName().substituteAll('/', '_')/]_H
#define [getFullFilePath().substituteAll('/', '_')/][getName().substituteAll('/', '_')/]_H

[comment ---------- generate includes ----------------------------------/]
[genHIncludes()/]
[if ( aClass.hasSuperclass( ) ) ]
#include "[aClass.getFullFilePath()/][aClass.getSuperClasses().name/].h"
[/if]
/**********************************************************************************
 * [getFilePath()/][getName()/].h
 **********************************************************************************/

/*## package [getFullFilePath().concat('/').substituteAll('//', '').substituteAll('/', '::')/] */

/*! 
 * \package [name/]
[if ownedComment->notEmpty()]
 * [ownedComment.format('\x5cbrief ', false, ' * ', 120)/]
[/if]
[if (isTraceabilityEnabled())]
[if (aClass.isConstrained(getModel().getAllConstraints()))]
 *
 * <b>Requirements traceability</b>
 [aClass.getRequirementList('*   ')/]
[/if]
[/if]
 */

/*## class TopLevel::[name/] */

[if aClass.hasVirtualMethods() ]

//Class [aClass.name/] V-Table
struct [aClass.name/]Vtbl;
[/if]

//Class [aClass.name/] declaration
typedef struct {
	[if aClass.hasSuperclass() ]
	[aClass.getSuperClasses().name/] super;
	[if not aClass.superClass->exists(hasVirtualMethods())]
	struct [aClass.name/]Vtbl const *vptr;
	[/if]
	[else]
	[if aClass.hasVirtualMethods()]
	struct [aClass.name/]Vtbl const *vptr;
	[/if]
	[/if]
	[let seq : Sequence(uml::NamedElement) = getNotReadOnly(getHasTypeApplied(getNotUsesStaticMethods(ownedAttribute->asSequence())))]
	[for (n : uml::NamedElement | seq->orderByContents())]
	[n.oclAsType(uml::Property).generateProperty()/]; 
	[/for]	
	[/let]
}[aClass.name/];

[if aClass.hasVirtualMethods() ]

//Class [aClass.name/] V-Table
typedef struct [aClass.name/]Vtbl{
	[if aClass.hasSuperclass() and aClass.superClass->exists ( hasVirtualMethods() ) ]
	[aClass.getSuperClasses().name/]Vtbl superClass;
	[/if]
	[let seqOp : Sequence(uml::Operation) = getNotRedefiner ( getNotInline ( getNotStatic ( getNotPrivate ( getVirtual ( getOwnedOperations ( aClass ) ) ) ) ) ) ]
	[for (o : Operation | seqOp)  ]
	[o.generateReturnType()/] (*[o.name/])([o.generateSOOPCMethodArguments()/]); 
	[/for]
	[/let]
}[aClass.name/]Vtbl;

[/if]

[comment ---------- generate macros & constants ------------------------/]
[genHDefines()/]

[comment ---------- generate type definitions --------------------------/]
[genHTypes()/]

[comment ---------- generate constants ---------------------------------/]
[if (aClass.hasHConstants())]
[genHConstants()/]

[/if]
[comment ---------- generate variable definitions ----------------------/]
[comment][if (aClass.hasHVariables())][/comment]
[comment][genHVariables()/][/comment]

[comment][/if][/comment]
[comment ---------- generate public inline functions -------------------/]
[if (aClass.hasHInlineOperations())]
[genHInlineOperations()/]

[/if]
[comment ---------- generate prototypes of prublic operations ----------/]
[if (aClass.hasHPublicOperationsPrototypes())]
[for (o : Operation | aClass.ownedOperation) ]      
[if o.visibility <> VisibilityKind::private and not isAMethodRedefinition(o)]
[generateSOOPCMethodPrototype(o)/];
[/if]
[/for]

[/if]
#endif

/**********************************************************************************
 * File Path: [getFullFilePath()/][getName()/].h
 **********************************************************************************/
[/template]
