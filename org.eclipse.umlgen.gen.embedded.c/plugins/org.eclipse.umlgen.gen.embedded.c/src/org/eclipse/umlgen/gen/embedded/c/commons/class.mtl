[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2015 Spacebel SA.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Johan Hardy (Spacebel) - initial API and implementation
[/comment]
[module class('http://www.eclipse.org/uml2/5.0.0/UML')/]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::method /]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations /]

[comment][query public isSingleton(c : uml::Class) : Boolean = c.hasStereotype('embedded_C::Singleton')/][/comment]
[query public isSingleton(c : uml::Class) : Boolean = c.isFinalSpecialization and not c.isLeaf/]


[comment][query public isObject(c : uml::Class) : Boolean = c.hasStereotype('embedded_C::Object')/][/comment]
[query public isObject(c : uml::Class) : Boolean = not c.isFinalSpecialization and  c.isLeaf/]

[comment][query public isTDA(c : uml::Class) : Boolean = c.hasStereotype('embedded_C::TDA')/][/comment]

[query public isTDA(c : uml::Class) : Boolean = not c.isFinalSpecialization and  not c.isLeaf/]

[query public getOwnedOperations(c : uml::Class) : Sequence(uml::Operation) = c.ownedOperation->asSequence()/]

[query public isPrivate(c : uml::Class) : Boolean = (c.visibility = VisibilityKind::private)/]

[query public isPublic(c : uml::Class) : Boolean = (c.visibility = VisibilityKind::public)/]

[query public entireClassesHierarchechy(c: Class) : OrderedSet ( Class ) =
c->asOrderedSet()->addAll( c.superClass->iterate(ac : Class;os:OrderedSet(Class) = OrderedSet{}| os->addAll(entireClassesHierarchechy(ac))->asOrderedSet())) /]

[query public getAllOperations(aClass: Class) : Sequence ( Operation ) =
entireClassesHierarchechy(aClass)->collect( c: Class | c.ownedOperation )->asSequence() /]

[query public getAncestors (aClass : Class) : Set(Class) = aClass.entireClassesHierarchechy()->excluding(aClass)/]


[query public firstAncestorName(c: Class) :   String  =
entireClassesHierarchechy(c)->last().name /]

[query public lastAncestorName(c: Class) :   String  =
if ( not hasSuperclass() ) then
	c.name
else
	c.superClass.name
endif
 /]

[query public hasSuperclass(c: Class) :   Boolean  =
 c.superClass->size() > 0 /]

[query public hasVirtualMethods(aClass: Class) :   Boolean  =
 aClass.entireClassesHierarchechy()->exists( c : Class | declaresVirtualMethods(c) ) /]

[query public declaresVirtualMethods (aClass : Class) : Boolean = getVirtual( getOwnedOperations( aClass ) )->notEmpty()/]


[query public allNotFinalOperations(c: Class) : OrderedSet ( Operation ) =
c.entireClassesHierarchechy()->reverse()->iterate(c1:Class;os:OrderedSet(Operation) = OrderedSet{}| os->addAll(c1.ownedOperation->reject(o:Operation|os->exists(redefine(o))))) /]

[query public getNotRedefiner(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not(op.isAMethodRedefinition()))->asSequence()/]

[query public isAMethodRedefinition(o: Operation) : Boolean =
o.class.entireClassesHierarchechy()->excluding(class).allNotFinalOperations()->exists(o1:Operation |redefine(o1,o))/]

[query public getSingleInheritanceSuperClass(aClass: Class) :   Class  =
	if ( aClass.hasSuperclass()) then
		aClass.superClass->asOrderedSet()->first()
	else
		null
	endif
/]

[query public getAllInterfaces(aClass : Class) : Bag(NamedElement) = aClass.clientDependency->filter(Realization).supplier /]



[template public getFirstClassDefinerName(aClass: Class ,aMethod: Operation) post(substituteAll('\t','').trim())]
	[if (aClass.ownedOperation->exists(m:Operation | m.redefine( aMethod ) ))]
		[aClass.name/]
	[else]
	[if aClass.hasSuperclass()]
		[aClass.getSingleInheritanceSuperClass().getFirstClassDefinerName(aMethod)/]
	[/if]
	[/if]
[/template]