[comment encoding = UTF-8 /]
[comment]
 * Copyright (c) 2015 Spacebel SA.,2018
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Johan Hardy (Spacebel) - initial API and implementation
[/comment]
[module class('http://www.eclipse.org/uml2/5.0.0/UML')/]
[import org::eclipse::umlgen::gen::embedded::c::commons::namedelement/]
[import org::eclipse::umlgen::gen::embedded::c::commons::method /]
[import org::eclipse::umlgen::gen::embedded::c::commons::operations /]

[query public isSingleton(c : uml::Class) : Boolean = c.hasStereotype('embedded_C::Singleton')/]

[query public isObject(c : uml::Class) : Boolean = c.hasStereotype('embedded_C::Object')/]

[query public getOwnedOperations(c : uml::Class) : Sequence(uml::Operation) = c.ownedOperation->asSequence()/]

[query public isPrivate(c : uml::Class) : Boolean = (c.visibility = VisibilityKind::private)/]

[query public isPublic(c : uml::Class) : Boolean = (c.visibility = VisibilityKind::public)/]

[**
 * \template entireClassesHierarchechy 
 * \brief 	devuelve toda la cadena de clases de la herencia single 
 * el primer elemento de la lista devuelta sera la clase consultada seguida de su padre
 * y as√≠ sucesivamente
*/]
[query public entireClassesHierarchechy(aClass: Class) : OrderedSet ( Class ) =
if aClass<>null then
	aClass.superClass.entireClassesHierarchechy()->asOrderedSet()->prepend(aClass)
else
	OrderedSet{}
endif
 /]

[query public getAllOperations(aClass: Class) : Sequence ( Operation ) =
entireClassesHierarchechy(aClass)->collect( c: Class | c.ownedOperation )->asSequence() /]

[query public getAncestors (aClass : Class) : Set(Class) = aClass.entireClassesHierarchechy()->excluding(aClass)/]


[query public firstAncestorName(c: Class) :   String  =
entireClassesHierarchechy(c)->last().name /]

[query public lastAncestorName(c: Class) :   String  =
if ( not hasSuperclass() ) then
	c.getName()
else
	c.superClass.getName()
endif
 /]

[query public getAllRelatedClassesWithVirtualMethods (aClass : Class) : OrderedSet(Class) = aClass.entireClassesHierarchechy()->select( c1: Class | c1.hasVirtualMethods() )->asOrderedSet()/]

[query public getFirstRelatedClassWithVirtualMethods (aClass : uml::Class) : uml::Class = aClass.getAllRelatedClassesWithVirtualMethods()->last()/]


[query public hasSuperclass(c: Class) :   Boolean  =
 c.superClass->size() > 0 /]

[query public hasVirtualMethods(aClass: Class) :   Boolean  =
 aClass.entireClassesHierarchechy()->exists( c : Class | declaresVirtualMethods(c) ) /]

[query public declaresVirtualMethods (aClass : Class) : Boolean = getVirtual( getOwnedOperations( aClass ) )->notEmpty()/]

[query public getVirtual(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | op.isVirtual() or op.isAMethodRedefinition())->asSequence()/]

[query public getNotVirtual(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not(op.isVirtual()) and not op.isAMethodRedefinition())->asSequence()/]


[query public allNotFinalOperations(c: Class) : OrderedSet ( Operation ) =
c.entireClassesHierarchechy()->reverse()->iterate(c1:Class;os:OrderedSet(Operation) = OrderedSet{}| os->addAll(c1.ownedOperation->reject(o:Operation|os->exists(redefine(o))))) /]

[query public getNotRedefiner(seq : Sequence(uml::Operation)) : Sequence(uml::Operation) =  
seq->select(op : uml::Operation | not(op.isAMethodRedefinition()))->asSequence()/]

[query public isAMethodRedefinition(o: Operation) : Boolean =
o.class.entireClassesHierarchechy()->excluding(class).allNotFinalOperations()->exists(o1:Operation |redefine(o1,o))/]

[query public getSingleInheritanceSuperClass(aClass: Class) :   Class  =
	if ( aClass.hasSuperclass()) then
		aClass.superClass->asOrderedSet()->first()
	else
		null
	endif
/]

[query public getAllInterfaces(aClass : Class) : Bag(Interface) = aClass.clientDependency->filter(Realization).supplier->filter(uml::Interface) /]

[query public hasInterfaces(aClass : Class) : Boolean = 
if(aClass.getAllInterfaces()->notEmpty()) then
	true
else 
	if (aClass.getSingleInheritanceSuperClass() <> null ) then
		aClass.getSingleInheritanceSuperClass().hasInterfaces()
	else
		false
	endif
endif
 /]

[query public isOocClass(aClass : uml::Class) : Boolean = aClass.hasStereotype('embedded_C::OOC')/]

[query public isSoopcClass(aClass : uml::Class) : Boolean = aClass.hasStereotype('embedded_C::SOOPC')/]

[query public isDynaceClass(aClass : uml::Class) : Boolean = aClass.hasStereotype('embedded_C::Dynace')/]


[template public getLastClassDefinerName(aClass: Class ,aMethod: Operation) post(substituteAll('\t','').trim())]
	[if (aClass.ownedOperation->exists(m:Operation | m.redefine( aMethod ) ))]
		[aClass.name/]
	[else]
	[if aClass.hasSuperclass()]
		[aClass.getSingleInheritanceSuperClass().getLastClassDefinerName(aMethod)/]
	[/if]
	[/if]
[/template]

[template public getFirstClassDefinerName(classes: OrderedSet(Class) ,aMethod: Operation) post(substituteAll('\t','').trim())]
	[let c: uml::Class = classes->first() ]
		[if (c.ownedOperation->exists(m:Operation | m.redefine( aMethod ) ))]
			[c.name/]
		[else]
[comment] **Note** : at the time of writing, the OCL standard library sports a bug which changes *OrderedSets* in *Sets* when excluding elements.[/comment]
[comment]			[getFirstClassDefinerName(classes->excluding(c)->asOrderedSet(),aMethod)/][/comment]
			[getFirstClassDefinerName(classes->asSequence()->excluding(c)->asOrderedSet(),aMethod)/]
		[/if]
	[/let]
[/template]

[template public getFirstClassDefinerName(aClass: Class ,aMethod: Operation) post(substituteAll('\t','').trim())]
	[getFirstClassDefinerName(aClass.entireClassesHierarchechy()->reverse(),aMethod )/]
[/template]